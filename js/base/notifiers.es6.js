const registered = {};

function add (notifierName) {
    // Auto-generate our notification functions here,
    // add each to `registered` object that
    // gets combine()'d below.
    registered[notifierName] = (state, notification) => {
        if (state === undefined) state = { change: null };

        if (notification.notifierName === notifierName) {
            // So far, model changes are the only notification
            // types. in the future if we want to add more types, they
            // would go here:
            var change = notification.change || null;
            return {
              change: change,
              attributes: notification.attributes
            };
        } else {
          return state;
        }
    }
}

function combine () {
    var keys = Object.keys(registered)

    return function combination (state, notification) {
      var hasChanged = false;
      var nextState = {};

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (typeof registered[key] !== 'function') throw new Error('notifier ' + key + 'must be a function');
        nextState[key] = registered[key](state[key], notification);
        hasChanged = hasChanged || nextState[key] !== state[key];
      }

      return hasChanged ? nextState : state;
    }

}

function remove (notifier) {
    if (registered[notifier]) {
        delete registered[notifier];
        return true;
    }
}


// Public api
module.exports = {
  registered: registered, // object containing each of our notifier funcs auto-generated by .add()
  add: add, // adds a new notifier to `registered`
  combine: combine, // similar to Minidux (a Redux variation) combineReducers()
  remove: remove // remove a notifier from registered
}
